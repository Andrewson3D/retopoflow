import bpy
import math
from .rftool import RFTool
from ..common.maths import Point,Point2D,Vec2D,Vec
from ..common.ui import UI_Image

@RFTool.action_call('relax tool')
class RFTool_Relax(RFTool):
    ''' Called when RetopoFlow is started, but not necessarily when the tool is used '''
    def init(self):
        self.FSM['relax'] = self.modal_relax
        self.FSM['relax selected'] = self.modal_relax_selected
    
    def name(self): return "Relax"
    def icon(self): return "rf_relax_icon"
    def description(self): return 'Relax topology by changing length of edges to average'
    
    ''' Called the tool is being switched into '''
    def start(self):
        self.rfwidget.set_widget('brush falloff', color=(0.5, 1.0, 0.5))
    
    def get_ui_icon(self):
        icon = [[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,16],[0,0,0,96],[0,0,0,159],[0,0,0,207],[0,0,0,255],[0,0,0,255],[0,0,0,255],[0,0,0,255],[0,0,0,251],[0,0,0,232],[0,0,0,155],[0,0,0,19],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,64],[0,0,0,159],[0,0,0,255],[0,0,0,255],[0,0,0,255],[0,0,0,255],[0,0,0,255],[0,0,0,255],[0,0,0,255],[0,0,0,255],[0,0,0,255],[0,0,0,255],[0,0,0,255],[0,0,0,255],[0,0,0,226],[0,0,0,51],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[46,27,13,4],[0,0,0,0],[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,16],[0,0,0,159],[0,0,0,255],[0,0,0,255],[0,0,0,255],[32,32,32,255],[112,112,112,255],[175,175,175,255],[207,207,207,255],[255,255,255,255],[255,255,255,255],[221,221,221,255],[164,164,164,255],[78,78,78,255],[12,12,12,255],[0,0,0,255],[0,0,0,248],[0,0,0,173],[8,5,2,25],[44,26,12,1],[0,0,0,0],[0,0,0,0],[0,0,0,0],[46,27,13,1],[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,48],[0,0,0,223],[0,0,0,255],[0,0,0,255],[64,64,64,255],[191,191,191,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[199,199,199,255],[37,37,37,255],[0,0,0,248],[0,0,0,192],[3,2,1,6],[108,98,90,2],[124,113,104,1],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,48],[0,0,0,239],[0,0,0,255],[16,16,16,255],[175,175,175,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[175,175,175,255],[7,7,7,255],[0,0,0,202],[6,6,6,75],[189,189,189,12],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,48],[0,0,0,239],[0,0,0,255],[48,48,48,255],[239,239,239,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[252,252,252,255],[224,224,224,255],[24,24,24,255],[0,0,0,236],[5,5,5,192],[130,121,115,32],[0,0,0,0],[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,16],[0,0,0,223],[0,0,0,255],[48,48,48,255],[239,239,239,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[251,251,251,255],[249,249,249,255],[245,245,245,255],[234,234,234,255],[24,24,24,255],[0,0,0,255],[4,3,2,176],[44,26,12,5],[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,159],[0,0,0,255],[16,16,16,255],[174,168,163,255],[151,141,134,255],[151,141,134,255],[203,198,195,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[240,239,238,255],[242,241,241,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[250,250,250,255],[243,243,243,255],[238,238,238,255],[240,240,240,255],[236,236,236,255],[208,208,208,255],[7,7,7,255],[0,0,0,237],[11,6,3,84],[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,64],[0,0,0,255],[0,0,0,255],[61,49,40,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[124,113,104,255],[179,171,166,255],[238,236,235,255],[234,232,231,255],[244,243,242,255],[250,250,249,255],[254,254,254,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[251,251,251,255],[244,244,244,255],[237,237,237,255],[229,229,229,255],[224,224,224,255],[231,231,231,255],[226,226,226,255],[157,157,157,255],[0,0,0,255],[0,0,0,236],[0,0,0,82],[0,0,0,0]],[[0,0,0,0],[0,0,0,175],[0,0,0,255],[17,10,5,255],[46,27,13,255],[46,27,13,255],[137,127,119,255],[137,127,119,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[70,53,41,255],[77,61,49,255],[139,128,121,255],[153,142,133,255],[166,150,133,255],[185,173,161,255],[184,174,163,255],[186,179,174,255],[183,177,172,255],[178,172,167,255],[161,154,148,255],[132,122,115,255],[124,113,105,255],[162,156,152,255],[216,216,216,255],[222,222,222,255],[217,217,217,255],[37,37,37,255],[0,0,0,255],[0,0,0,238],[0,0,0,0]],[[0,0,0,32],[0,0,0,255],[0,0,0,255],[64,50,41,255],[46,27,13,255],[137,127,119,255],[255,255,255,255],[255,255,255,255],[108,95,85,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[47,28,13,255],[47,28,13,255],[47,28,13,255],[47,28,13,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[101,88,79,255],[211,211,211,255],[211,211,211,255],[166,166,166,255],[0,0,0,255],[0,0,0,255],[0,0,0,36]],[[0,0,0,96],[0,0,0,255],[48,48,48,255],[124,113,104,255],[46,27,13,255],[151,141,134,255],[255,255,255,255],[255,255,255,255],[113,101,91,255],[46,27,13,255],[48,29,14,255],[53,33,16,255],[54,33,17,255],[54,33,17,255],[54,33,17,255],[54,33,16,255],[54,33,16,255],[58,36,18,255],[57,35,17,255],[47,28,13,255],[46,27,13,255],[47,28,14,255],[140,130,122,255],[160,151,145,255],[61,43,30,255],[46,27,13,255],[142,135,130,255],[206,206,206,255],[200,200,200,255],[15,15,15,255],[0,0,0,255],[0,0,0,161]],[[0,0,0,175],[0,0,0,255],[128,128,128,255],[177,170,164,255],[46,27,13,255],[46,27,13,255],[137,127,119,255],[137,127,119,255],[46,27,13,255],[46,27,13,255],[151,113,65,255],[204,155,89,255],[204,153,89,255],[202,151,86,255],[199,144,79,255],[195,135,69,255],[194,131,65,255],[201,136,67,255],[201,136,67,255],[171,115,56,255],[46,27,13,255],[126,114,106,255],[255,255,255,255],[255,255,255,255],[170,162,156,255],[46,27,13,255],[96,85,76,255],[198,198,198,255],[195,195,195,255],[68,68,68,255],[0,0,0,255],[0,0,0,235]],[[0,0,0,207],[0,0,0,255],[191,191,191,255],[255,255,255,255],[124,113,104,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[123,88,49,255],[251,189,109,255],[248,182,101,255],[243,172,91,255],[240,165,83,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[54,33,16,255],[123,111,102,255],[255,255,255,255],[255,255,255,255],[162,153,147,255],[46,27,13,255],[97,85,77,255],[184,184,184,255],[188,188,188,255],[125,125,125,255],[0,0,0,255],[0,0,0,252]],[[0,0,0,255],[0,0,0,255],[239,239,239,255],[255,255,255,255],[255,255,255,255],[151,141,134,255],[46,27,13,255],[46,27,13,255],[186,136,77,255],[249,184,105,255],[244,173,92,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[103,69,36,255],[48,29,15,255],[125,114,105,255],[136,126,118,255],[51,33,20,255],[46,27,13,255],[130,124,120,255],[172,172,172,255],[182,182,182,255],[159,159,159,255],[0,0,0,255],[0,0,0,255]],[[0,0,0,255],[0,0,0,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[203,198,195,255],[46,27,13,255],[46,27,13,255],[247,179,101,255],[247,178,99,255],[243,170,89,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[212,155,93,255],[85,55,29,255],[85,54,26,255],[46,27,13,255],[46,27,13,255],[90,78,69,255],[147,146,144,255],[171,171,171,255],[176,176,176,255],[169,169,169,255],[0,0,0,255],[0,0,0,255]],[[0,0,0,255],[0,0,0,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[203,198,195,255],[46,27,13,255],[46,27,13,255],[245,173,95,255],[245,171,93,255],[242,166,86,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[236,162,83,255],[216,148,75,255],[72,52,35,255],[71,57,46,255],[78,65,54,255],[151,151,150,255],[170,170,170,255],[171,171,171,255],[164,164,164,255],[0,0,0,255],[0,0,0,255]],[[0,0,0,255],[0,0,0,255],[255,255,255,255],[255,255,255,255],[255,255,255,255],[203,198,195,255],[46,27,13,255],[46,27,13,255],[243,166,89,255],[242,165,87,255],[240,163,84,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[238,160,79,255],[209,139,67,255],[60,36,17,255],[46,27,13,255],[67,52,41,255],[146,146,146,255],[163,163,163,255],[164,164,164,255],[148,148,148,255],[0,0,0,255],[0,0,0,255]],[[0,0,0,191],[0,0,0,255],[207,207,207,255],[255,255,255,255],[255,255,255,255],[203,198,195,255],[46,27,13,255],[46,27,13,255],[241,160,83,255],[240,158,81,255],[239,160,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[238,160,79,255],[234,141,65,255],[204,120,55,255],[55,32,15,255],[46,27,13,255],[87,77,69,255],[139,139,139,255],[163,163,163,255],[158,158,158,255],[114,114,114,255],[0,0,0,255],[0,0,0,191]],[[0,0,0,159],[0,0,0,255],[128,128,128,255],[255,255,255,255],[255,255,255,255],[203,198,195,255],[46,27,13,255],[46,27,13,255],[238,153,77,255],[238,152,76,255],[238,157,78,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[236,151,72,255],[230,130,56,255],[203,114,48,255],[50,29,13,255],[46,27,13,255],[99,92,85,255],[138,138,138,255],[158,158,158,255],[151,151,151,255],[73,73,73,255],[0,0,0,255],[0,0,0,159]],[[0,0,0,96],[0,0,0,255],[48,48,48,255],[255,255,255,255],[255,255,255,255],[203,198,195,255],[46,27,13,255],[46,27,13,255],[236,147,71,255],[235,145,70,255],[237,153,75,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[239,163,81,255],[233,142,64,255],[228,124,51,255],[205,110,44,255],[46,27,13,255],[46,27,13,255],[118,116,114,255],[146,146,146,255],[151,151,151,255],[144,144,144,255],[26,26,26,255],[0,0,0,255],[0,0,0,96]],[[0,0,0,16],[0,0,0,255],[0,0,0,255],[199,199,199,255],[255,255,255,255],[177,170,164,255],[46,27,13,255],[46,27,13,255],[175,106,50,255],[233,139,64,255],[235,147,69,255],[237,155,75,255],[237,155,75,255],[237,155,75,255],[237,154,74,255],[236,154,74,255],[236,153,73,255],[236,153,73,255],[236,152,73,255],[236,152,72,255],[229,127,52,255],[159,84,33,255],[105,57,23,255],[46,27,13,255],[46,27,13,255],[124,123,122,255],[151,151,151,255],[144,144,144,255],[107,107,107,255],[0,0,0,255],[0,0,0,255],[0,0,0,16]],[[0,0,0,0],[0,0,0,159],[0,0,0,255],[72,72,72,255],[124,113,104,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[115,67,30,255],[230,130,56,255],[230,128,55,255],[229,127,53,255],[228,125,52,255],[228,123,50,255],[227,121,48,255],[226,120,47,255],[226,118,45,255],[225,116,44,255],[225,114,42,255],[102,54,22,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[77,65,55,255],[144,144,144,255],[137,137,137,255],[37,37,37,255],[0,0,0,255],[0,0,0,159],[0,0,0,0]],[[0,0,0,0],[0,0,0,32],[0,0,0,255],[12,7,3,255],[46,27,13,255],[46,27,13,255],[137,127,119,255],[137,127,119,255],[46,27,13,255],[46,27,13,255],[160,87,36,255],[227,122,49,255],[227,120,47,255],[226,118,46,255],[225,117,44,255],[225,115,42,255],[224,113,41,255],[224,112,40,255],[223,111,39,255],[157,79,29,255],[46,27,13,255],[59,41,28,255],[151,141,134,255],[126,115,106,255],[46,27,13,255],[46,27,13,255],[108,102,98,255],[93,93,93,255],[0,0,0,255],[0,0,0,255],[0,0,0,32],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,143],[23,14,7,255],[46,27,13,255],[137,127,119,255],[255,255,255,255],[255,255,255,255],[151,141,134,255],[46,27,13,255],[69,39,17,255],[91,50,21,255],[91,49,21,255],[91,49,20,255],[91,48,20,255],[90,48,19,255],[90,48,19,255],[90,48,19,255],[90,48,19,255],[68,37,16,255],[46,27,13,255],[151,141,134,255],[255,255,255,255],[255,255,255,255],[137,127,119,255],[46,27,13,255],[74,65,58,255],[8,8,8,255],[0,0,0,255],[0,0,0,143],[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,16],[28,17,8,207],[46,27,13,255],[137,127,119,255],[255,255,255,255],[255,255,255,255],[151,141,134,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[151,141,134,255],[255,255,255,255],[255,255,255,255],[137,127,119,255],[46,27,13,255],[23,14,7,255],[0,0,0,255],[0,0,0,207],[0,0,0,16],[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,0],[46,27,13,64],[46,27,13,255],[46,27,13,255],[137,127,119,255],[137,127,119,255],[46,27,13,255],[46,27,13,255],[132,123,116,255],[171,166,163,255],[159,154,151,255],[146,141,138,255],[139,134,131,255],[133,128,125,255],[128,123,120,255],[122,118,114,255],[117,112,109,255],[94,85,78,255],[46,27,13,255],[46,27,13,255],[137,127,119,255],[124,113,104,255],[46,27,13,255],[46,27,13,255],[12,7,3,255],[0,0,0,239],[0,0,0,48],[0,0,0,0],[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[46,27,13,159],[46,27,13,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[111,99,90,255],[215,215,215,255],[210,210,210,255],[204,204,204,255],[198,198,198,255],[187,187,187,255],[179,179,179,255],[172,172,172,255],[165,165,165,255],[166,166,166,255],[159,159,159,255],[86,74,65,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[46,27,13,255],[29,17,8,255],[0,0,0,239],[0,0,0,48],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[46,27,13,96],[28,17,8,207],[23,14,7,255],[17,10,5,255],[54,54,54,255],[150,150,150,255],[204,204,204,255],[198,198,198,255],[192,192,192,255],[186,186,186,255],[179,179,179,255],[173,173,173,255],[167,167,167,255],[159,159,159,255],[152,152,152,255],[145,145,145,255],[76,71,67,255],[23,14,7,255],[23,14,7,255],[12,7,3,255],[0,0,0,207],[0,0,0,48],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,16],[0,0,0,143],[0,0,0,255],[0,0,0,255],[0,0,0,255],[25,25,25,255],[78,78,78,255],[122,122,122,255],[135,135,135,255],[148,148,148,255],[142,142,142,255],[120,120,120,255],[100,100,100,255],[59,59,59,255],[12,12,12,255],[0,0,0,255],[0,0,0,255],[0,0,0,255],[0,0,0,143],[0,0,0,16],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,32],[0,0,0,159],[0,0,0,239],[0,0,0,255],[0,0,0,255],[0,0,0,255],[0,0,0,255],[0,0,0,255],[0,0,0,255],[0,0,0,255],[0,0,0,255],[0,0,0,255],[0,0,0,255],[0,0,0,239],[0,0,0,159],[0,0,0,32],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,16],[0,0,0,80],[0,0,0,143],[0,0,0,191],[0,0,0,223],[0,0,0,255],[0,0,0,255],[0,0,0,223],[0,0,0,191],[0,0,0,143],[0,0,0,80],[0,0,0,16],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]]
        self.ui_icon = UI_Image(icon)
        self.ui_icon.set_size(16, 16)
        return self.ui_icon
    
    def modal_main(self):
        if self.rfcontext.actions.pressed('action'):
            self.rfcontext.undo_push('relax')
            return 'relax'
        
        if self.rfcontext.actions.pressed('relax selected'):
            self.rfcontext.undo_push('relax selected')
            self.sel_verts = self.rfcontext.get_selected_verts()
            self.selected = [(v,0.0) for v in self.sel_verts]
            self.sel_edges = self.rfcontext.get_selected_edges()
            self.sel_faces = self.rfcontext.get_selected_faces()
            return 'relax selected'
    
    @RFTool.dirty_when_done
    def modal_relax(self):
        if self.rfcontext.actions.released('action'):
            return 'main'
        if self.rfcontext.actions.pressed('cancel'):
            self.rfcontext.undo_cancel()
            return 'main'
        
        if not self.rfcontext.actions.timer: return
        
        hit_pos = self.rfcontext.actions.hit_pos
        if not hit_pos: return
        
        radius = self.rfwidget.get_scaled_radius()
        nearest = self.rfcontext.nearest_verts_point(hit_pos, radius)
        # collect data for smoothing
        verts,edges,faces,vert_dist = set(),set(),set(),dict()
        for bmv,d in nearest:
            verts.add(bmv)
            edges.update(bmv.link_edges)
            faces.update(bmv.link_faces)
            vert_dist[bmv] = d
        self._relax(verts, edges, faces, vert_dist)
    
    @RFTool.dirty_when_done
    def modal_relax_selected(self):
        if self.rfcontext.actions.released('relax selected'):
            return 'main'
        if self.rfcontext.actions.pressed('cancel'):
            self.rfcontext.undo_cancel()
            return 'main'
        if not self.rfcontext.actions.timer: return
        self._relax(self.sel_verts, self.sel_edges, self.sel_faces)
    
    def _relax(self, verts, edges, faces, vert_dist=None):
        if not verts or not edges: return
        vert_dist = vert_dist or {}
        
        time_delta = self.rfcontext.actions.time_delta
        strength = 100.0 * self.rfwidget.strength * time_delta
        radius = self.rfwidget.get_scaled_radius()
        
        avgDist,avgCount,divco = 0,0,{}
        
        # compute average edge length
        for bme in edges: avgDist += bme.calc_length()
        avgDist /= len(edges)
        
        for bme in edges:
            for bmv in bme.verts:
                divco[bmv] = Point(bmv.co)
        for bmf in faces:
            for bmv in bmf.verts:
                divco[bmv] = Point(bmv.co)
        
        # perform smoothing
        touched = set()
        for bmv0 in verts:
            d = vert_dist.get(bmv0, 0)
            lbme,lbmf = bmv0.link_edges,bmv0.link_faces
            if not lbme: continue
            # push edges closer to average edge length
            for bme in lbme:
                if bme not in edges: continue
                if bme in touched: continue
                bmv1 = bme.other_vert(bmv0)
                diff = bmv1.co - bmv0.co
                m = (avgDist - diff.length) * (1.0 - d) * 0.1
                divco[bmv1] += diff * m * strength
                divco[bmv0] -= diff * m * strength
            # attempt to "square" up the faces
            for bmf in lbmf:
                if bmf not in faces: continue
                cnt = len(bmf.verts)
                ctr = sum([bmv.co for bmv in bmf.verts], Vec((0,0,0))) / cnt
                fd = sum((ctr-bmv.co).length for bmv in bmf.verts) / cnt
                for bmv in bmf.verts:
                    diff = (bmv.co - ctr)
                    m = (fd - diff.length)* (1.0- d) / cnt
                    divco[bmv] += diff * m * strength
        
        # update
        for bmv,co in divco.items():
            if bmv not in verts: continue
            p,_,_,_ = self.rfcontext.nearest_sources_Point(co)
            bmv.co = p
